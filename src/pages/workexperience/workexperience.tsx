import './workexperience.css'

export function WorkExperiencePage() {
    return (
        <div className="work-experience-content">
            <p>For a breakdown of the kinds of tech I used/projects I worked on, please see my <a href="/files/Anthony Sharp - CV November 2023.pdf" rel="noreferrer" target="_blank">CV</a>. On this page I'm just going to reflect on some of the challenges I faced, and the helpful things I learnt, whilst working at my previous jobs.</p>
            <h2>Full-Stack Developer - STR Group Limited</h2>
            <p className="caption">January 2022 - September 2023</p>
            <p>I definitely gained a lot of great experience working here. Not all of it was the good kind - I was actually made redundant from this job - but hey, today we're keeping it positive!</p>
            <p>Unlike my first job, being the only software developer there, this job gave me a lot of freedom to approach problems the way I saw best. This was great, because it meant I learnt a <em>lot</em>. And in the end, I think the company also benefitted greatly from it too (more on that in a moment). But at times, it was also a double-edged sword, because it came with a level of responsibility that I'd never had before.</p>
            <p>All-in-all, I think I handled that responsibility pretty well. But let's first talk about an example of one of the things I got wrong. After all, I'm here to talk about the things I <em>learned</em>, and you can't learn if you have no mistakes to <em>learn from</em>!</p>
            <p>In a nutshell, my job at this company was to work on their internal system (I actually can't get into too much detail here since I'm bound by a secrecy clause). Now, this internal system was used by just about everybody in the company. It was designed so that some people could do more than others, since there were permissions and access restrictions in place. Makes sense.</p>
            <p>So one day I'm going through the code, not having much else to do, and trying to keep myself busy. I was trying to see if I could cull any unused code, since for some reason the developer before me had never deleted anything, and so we had thousands and thousands of lines of code that didn't actually do... anything. I would not usually advocate for deleting stuff just for the fun of it, since that's the best way to break stuff. But in this case it was getting a bit unmanagable.</p>
            <p>Unbeknownst to me, I had accidentally taken out code used on a couple of the reports that controlled which users could see what data. This meant that some users were able to access data they normally wouldn't have been able to. Now although I definitely kicked myself for it, it wasn't really a huge deal, as this data was purely internal performance data, most of which everyone pretty much knew anyway. No data breach or anything like that - it was just more along the lines of senior management not wanting company-wide data being visible to everyone. Even still - my bad.</p>
            <p>My takeaway with this was that with great power comes great responsibility! You should always approach every task with caution and double or even triple-check what you're doing. Even better, write some tests or do some A/B comparisons. In fairness to myself, the codebase didn't have a single test (again, thanks to the previous developer), so it was tricky to know what I had broken. But at the end of the day, the buck stops with the one who broke it (me), so it goes without saying that you should always be careful.</p>
            <p>Now, let me do a 180 on that and tell you about the importance of something else I learned, which sort-of carries the complete opposite message to the story I just told: <i>don't be afraid to change things</i>!</p>
            <p>The first thing you have to understand about this job is that when I joined, everything was... shall we say... a bit of a mess. The way the code was organised didn't really make much sense, everything was slow, and nobody knew how it worked. We quite literally had pages on our internal system that would take two minutes to load, even for the smallest bits of data. Every month the directors would be trying to render their reports, only to cause the website to crash due to the PHP timeouts.</p>
            <p>You would think that as a result, people were coming to me every day, begging for it to be fixed! Well... no. Although everyone knew that this was happening, everyone seemed to have just "accepted" it by that point. Nobody asked me to make improvements to the system. However, that's what I ended up deciding to do anyway. After all, it <em>was</em> my job, and this was not sustainable in the long term.</p>
            <p>I suggested a complete, gradual re-write of the core business logic, which up until then was written in a spider's web of indecipherable stored procedures. It needed to be done in a way that provided a good outcome for the company - something that worked properly, delivered in as little time as possible, whilst not sacrificing quality or introducing bugs or creating other problems. At the same time, I also had to carefully navigate the expectations surrounding completing all the other things the company wanted me to do.</p>
            <p>This was a little bit scary, since I was only a few months into my job at the time, and so I definitely ran the risk of upsetting people if it didn't pan out correctly or took too long. But in the end, I think because I was brave enough to do what I knew was right, and because I had a plan, it actually ended up being huge success, and even with the extra work, I was still hitting all the deadlines and other things that were being asked of me.</p>
            <p>And that's the story of how a shiny new Go API was born. Once the re-write was done, because the system was now organised in a way that made sense, development of new features also took a massive productivity boost, so in the end I feel the work I did generated real value for the business. I also documented everything along the way too, again, not because anyone asked me to, but because I knew it was necessary for the longevity of the system they had built. Oh, and did I mention we even had unit tests now?!?!?</p>
            <p>So I'd like to end by stressing the importance of not being afraid to change things. Sure, there is a risk you might make a mistake, and it is na√Øve to go changing things willy-nilly, or if there's not a solid reason for it. But I would say this: don't be like the developer before me! Don't be the person who can't be bothered, and who opts to keep things the way they are, even when they know it's a disaster.</p>
            <h2>Software Developer - i-Wonder Aggregator Services Limited </h2>
            <p className="caption">February 2021 - December 2021</p>
            <p>This was my first ever software development job. When I started working as a software developer, it was both a shock and not a shock at the same time. The coding side of things I found quite easy, and pretty soon I was racing through tickets. What I had yet to learn though was that coding is not just about what you do, but is also sort-of about what everyone else expects you to do. Let me elaborate.</p>
            <p>Having not really had much experience of coding within a team before, I quickly came to learn that there are certain <em>unspoken standards</em> in the way you have to approach problems.</p>
            <p>I recall one time I was submitting some code that would load a list of data from a file into memory so that it could be used by the API. The client had provided this file with a specific format, so I figured it made sense to keep it like that, in case they ever wanted the data changed (in which case we could just swap-out the file). Anyways, I made the pull request. The code worked fine, but two of the more senior developers weren't convinced about the approach I had taken. Loading a file into the API was something we had never done before. Their preference was that the data should either be in a static C# file somewhere (which required a bunch of formatting [one of the senior developers later showed me the best way to do this and he made it look super easy]), or that it should be stored in the database.</p>
            <p>Looking back, I'm still not really sure whose approach was best. But for me, the main takeaway was that there are certain <em>expectations</em> surrounding the way you have to approach problems. The expectation I think I broke in this example was <em>"don't rock the boat"</em>. I think teams generally don't like when one person tries to do something in a different way to what's been done before (although that wasn't really my intention at the time; I was just trying to close my ticket!). This makes sense, because generally speaking, it's not a good idea to try and reinvent processes and systems that other people have already spent years figuring out. Of course, that's not to say that there is never a time and place for suggesting <em>"ways to do it differently"</em> when done in a constructive and collaborative manner. But the reality of working in a team is that what the team thinks is not always the same thing as what you think! The skill lies in handling this disconnect. And I think that is a people skill all good software developers have.</p>
            <p>This being my first time in a professional development environment, understanding when to push forwards with my ideas and when to defer to the ideas of others was the most tricky thing for me to figure out; I had always been so used to doing it "my way". What's more, up until then, I had never really been forced to think critically about the way I approached problems like that before. That's not to say that I didn't know what I was doing. But I had just not come to grips with what it meant to work in a team yet.</p>
            <p>In a few months though I got the hang of it, and soon the vast majority of my pull requests were being approved with no changes needed. And as a team we made some really cool stuff.</p>
        </div>
    )
}
